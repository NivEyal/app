# -*- coding: utf-8 -*-
"""Fastapi App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c6a5RtLU3Ag3oHHYkD7-blsj298YiKYg
"""

from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
import uuid
import hashlib
from typing import List

app = FastAPI()

# Simulated in-memory storage
users_db = {}
sessions_db = {}
submissions_db = {}
templates_db = {}

class UserCreate(BaseModel):
    username: str
    password: str

class UserResponse(BaseModel):
    id: str
    username: str

class LoginRequest(BaseModel):
    username: str
    password: str

class SessionResponse(BaseModel):
    session_id: str

class SubmissionCreate(BaseModel):
    title: str
    content: str

class SubmissionResponse(BaseModel):
    id: str
    title: str
    content: str

class TemplateCreate(BaseModel):
    name: str
    structure: str

class TemplateResponse(BaseModel):
    id: str
    name: str
    structure: str

# Password hashing function
def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

@app.post("/register", response_model=UserResponse)
def register(user: UserCreate):
    if user.username in users_db:
        raise HTTPException(status_code=400, detail="User already exists")
    user_id = str(uuid.uuid4())
    users_db[user.username] = {"id": user_id, "password": hash_password(user.password)}
    return {"id": user_id, "username": user.username}

@app.post("/login", response_model=SessionResponse)
def login(login_data: LoginRequest):
    user = users_db.get(login_data.username)
    if not user or user["password"] != hash_password(login_data.password):
        raise HTTPException(status_code=401, detail="Invalid credentials")
    session_id = str(uuid.uuid4())
    sessions_db[session_id] = login_data.username
    return {"session_id": session_id}

@app.get("/user", response_model=UserResponse)
def get_user(session_id: str):
    username = sessions_db.get(session_id)
    if not username:
        raise HTTPException(status_code=401, detail="Invalid session")
    user = users_db[username]
    return {"id": user["id"], "username": username}

@app.post("/submissions", response_model=SubmissionResponse)
def create_submission(submission: SubmissionCreate):
    submission_id = str(uuid.uuid4())
    submissions_db[submission_id] = {"title": submission.title, "content": submission.content}
    return {"id": submission_id, "title": submission.title, "content": submission.content}

@app.get("/submissions", response_model=List[SubmissionResponse])
def list_submissions():
    return [{"id": sid, **sub} for sid, sub in submissions_db.items()]

@app.put("/submissions/{submission_id}", response_model=SubmissionResponse)
def update_submission(submission_id: str, submission: SubmissionCreate):
    if submission_id not in submissions_db:
        raise HTTPException(status_code=404, detail="Submission not found")
    submissions_db[submission_id] = {"title": submission.title, "content": submission.content}
    return {"id": submission_id, "title": submission.title, "content": submission.content}

@app.delete("/submissions/{submission_id}")
def delete_submission(submission_id: str):
    if submission_id not in submissions_db:
        raise HTTPException(status_code=404, detail="Submission not found")
    del submissions_db[submission_id]
    return {"message": "Submission deleted successfully"}

@app.post("/templates", response_model=TemplateResponse)
def create_template(template: TemplateCreate):
    template_id = str(uuid.uuid4())
    templates_db[template_id] = {"name": template.name, "structure": template.structure}
    return {"id": template_id, "name": template.name, "structure": template.structure}

@app.get("/templates", response_model=List[TemplateResponse])
def list_templates():
    return [{"id": tid, **temp} for tid, temp in templates_db.items()]

@app.put("/templates/{template_id}", response_model=TemplateResponse)
def update_template(template_id: str, template: TemplateCreate):
    if template_id not in templates_db:
        raise HTTPException(status_code=404, detail="Template not found")
    templates_db[template_id] = {"name": template.name, "structure": template.structure}
    return {"id": template_id, "name": template.name, "structure": template.structure}

@app.delete("/templates/{template_id}")
def delete_template(template_id: str):
    if template_id not in templates_db:
        raise HTTPException(status_code=404, detail="Template not found")
    del templates_db[template_id]
    return {"message": "Template deleted successfully"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)